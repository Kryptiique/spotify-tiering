type Image {
  id: ID!
  name: String!
  url: String!
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  rating: Float
  lastRated: String
  dateDownloaded: String
  matches(filter: ModelDuplicatePairFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDuplicatePairConnection
  dupePair: DuplicatePair
  batch: Batch
  views(filter: ModelViewFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelViewConnection
  tags(filter: ModelImageTagFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelImageTagConnection
}

type Comment {
  id: ID!
  image: Image!
  date: String!
}

type View {
  id: ID!
  image: Image!
  date: String!
}

type DuplicatePair {
  id: ID!
  original: Image!
  duplicate: Image!
}

type Tag {
  id: ID!
  name: String!
  category: Category!
  count: Int
  images(filter: ModelImageTagFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelImageTagConnection
}

type Batch {
  id: ID!
  date: String!
  images(filter: ModelImageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelImageConnection
}

type ImageTag {
  id: ID!
  image: Image!
  tag: Tag!
}

enum Category {
  ARTIST
  CHARACTER
  COPYRIGHT
  DESCRIPTOR
  GENRE
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelImageConnection {
  items: [Image]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelImageFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  url: ModelStringFilterInput
  rating: ModelFloatFilterInput
  lastRated: ModelStringFilterInput
  dateDownloaded: ModelStringFilterInput
  and: [ModelImageFilterInput]
  or: [ModelImageFilterInput]
  not: ModelImageFilterInput
}

type Query {
  getImage(id: ID!): Image
  listImages(filter: ModelImageFilterInput, limit: Int, nextToken: String): ModelImageConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getView(id: ID!): View
  listViews(filter: ModelViewFilterInput, limit: Int, nextToken: String): ModelViewConnection
  getDuplicatePair(id: ID!): DuplicatePair
  listDuplicatePairs(filter: ModelDuplicatePairFilterInput, limit: Int, nextToken: String): ModelDuplicatePairConnection
  getTag(id: ID!): Tag
  listTags(filter: ModelTagFilterInput, limit: Int, nextToken: String): ModelTagConnection
  getBatch(id: ID!): Batch
  listBatchs(filter: ModelBatchFilterInput, limit: Int, nextToken: String): ModelBatchConnection
  getImageTag(id: ID!): ImageTag
  listImageTags(filter: ModelImageTagFilterInput, limit: Int, nextToken: String): ModelImageTagConnection
}

input CreateImageInput {
  id: ID
  name: String!
  url: String!
  rating: Float
  lastRated: String
  dateDownloaded: String
  imageDupePairId: ID
  imageBatchId: ID
}

input UpdateImageInput {
  id: ID!
  name: String
  url: String
  rating: Float
  lastRated: String
  dateDownloaded: String
  imageDupePairId: ID
  imageBatchId: ID
}

input DeleteImageInput {
  id: ID
}

type Mutation {
  createImage(input: CreateImageInput!): Image
  updateImage(input: UpdateImageInput!): Image
  deleteImage(input: DeleteImageInput!): Image
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: UpdateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
  createView(input: CreateViewInput!): View
  updateView(input: UpdateViewInput!): View
  deleteView(input: DeleteViewInput!): View
  createDuplicatePair(input: CreateDuplicatePairInput!): DuplicatePair
  updateDuplicatePair(input: UpdateDuplicatePairInput!): DuplicatePair
  deleteDuplicatePair(input: DeleteDuplicatePairInput!): DuplicatePair
  createTag(input: CreateTagInput!): Tag
  updateTag(input: UpdateTagInput!): Tag
  deleteTag(input: DeleteTagInput!): Tag
  createBatch(input: CreateBatchInput!): Batch
  updateBatch(input: UpdateBatchInput!): Batch
  deleteBatch(input: DeleteBatchInput!): Batch
  createImageTag(input: CreateImageTagInput!): ImageTag
  updateImageTag(input: UpdateImageTagInput!): ImageTag
  deleteImageTag(input: DeleteImageTagInput!): ImageTag
}

type Subscription {
  onCreateImage: Image @aws_subscribe(mutations: ["createImage"])
  onUpdateImage: Image @aws_subscribe(mutations: ["updateImage"])
  onDeleteImage: Image @aws_subscribe(mutations: ["deleteImage"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateView: View @aws_subscribe(mutations: ["createView"])
  onUpdateView: View @aws_subscribe(mutations: ["updateView"])
  onDeleteView: View @aws_subscribe(mutations: ["deleteView"])
  onCreateDuplicatePair: DuplicatePair @aws_subscribe(mutations: ["createDuplicatePair"])
  onUpdateDuplicatePair: DuplicatePair @aws_subscribe(mutations: ["updateDuplicatePair"])
  onDeleteDuplicatePair: DuplicatePair @aws_subscribe(mutations: ["deleteDuplicatePair"])
  onCreateTag: Tag @aws_subscribe(mutations: ["createTag"])
  onUpdateTag: Tag @aws_subscribe(mutations: ["updateTag"])
  onDeleteTag: Tag @aws_subscribe(mutations: ["deleteTag"])
  onCreateBatch: Batch @aws_subscribe(mutations: ["createBatch"])
  onUpdateBatch: Batch @aws_subscribe(mutations: ["updateBatch"])
  onDeleteBatch: Batch @aws_subscribe(mutations: ["deleteBatch"])
  onCreateImageTag: ImageTag @aws_subscribe(mutations: ["createImageTag"])
  onUpdateImageTag: ImageTag @aws_subscribe(mutations: ["updateImageTag"])
  onDeleteImageTag: ImageTag @aws_subscribe(mutations: ["deleteImageTag"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDFilterInput
  date: ModelStringFilterInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  date: String!
  commentImageId: ID!
}

input UpdateCommentInput {
  id: ID!
  date: String
  commentImageId: ID
}

input DeleteCommentInput {
  id: ID
}

type ModelViewConnection {
  items: [View]
  nextToken: String
}

input ModelViewFilterInput {
  id: ModelIDFilterInput
  date: ModelStringFilterInput
  and: [ModelViewFilterInput]
  or: [ModelViewFilterInput]
  not: ModelViewFilterInput
}

input CreateViewInput {
  id: ID
  date: String!
  viewImageId: ID!
}

input UpdateViewInput {
  id: ID!
  date: String
  viewImageId: ID
}

input DeleteViewInput {
  id: ID
}

type ModelDuplicatePairConnection {
  items: [DuplicatePair]
  nextToken: String
}

input ModelDuplicatePairFilterInput {
  id: ModelIDFilterInput
  and: [ModelDuplicatePairFilterInput]
  or: [ModelDuplicatePairFilterInput]
  not: ModelDuplicatePairFilterInput
}

input CreateDuplicatePairInput {
  id: ID
  duplicatePairOriginalId: ID!
  duplicatePairDuplicateId: ID!
}

input UpdateDuplicatePairInput {
  id: ID!
  duplicatePairOriginalId: ID
  duplicatePairDuplicateId: ID
}

input DeleteDuplicatePairInput {
  id: ID
}

type ModelTagConnection {
  items: [Tag]
  nextToken: String
}

input ModelCategoryFilterInput {
  eq: Category
  ne: Category
}

input ModelTagFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  category: ModelCategoryFilterInput
  count: ModelIntFilterInput
  and: [ModelTagFilterInput]
  or: [ModelTagFilterInput]
  not: ModelTagFilterInput
}

input CreateTagInput {
  id: ID
  name: String!
  category: Category!
  count: Int
}

input UpdateTagInput {
  id: ID!
  name: String
  category: Category
  count: Int
}

input DeleteTagInput {
  id: ID
}

type ModelBatchConnection {
  items: [Batch]
  nextToken: String
}

input ModelBatchFilterInput {
  id: ModelIDFilterInput
  date: ModelStringFilterInput
  and: [ModelBatchFilterInput]
  or: [ModelBatchFilterInput]
  not: ModelBatchFilterInput
}

input CreateBatchInput {
  id: ID
  date: String!
}

input UpdateBatchInput {
  id: ID!
  date: String
}

input DeleteBatchInput {
  id: ID
}

type ModelImageTagConnection {
  items: [ImageTag]
  nextToken: String
}

input ModelImageTagFilterInput {
  id: ModelIDFilterInput
  and: [ModelImageTagFilterInput]
  or: [ModelImageTagFilterInput]
  not: ModelImageTagFilterInput
}

input CreateImageTagInput {
  id: ID
  imageTagImageId: ID!
  imageTagTagId: ID!
}

input UpdateImageTagInput {
  id: ID!
  imageTagImageId: ID
  imageTagTagId: ID
}

input DeleteImageTagInput {
  id: ID
}
